schema {
  query: Query
}

type Query {
  blogs("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [BlogSortInput!] where: BlogFilterInput): BlogsConnection
}

input BlogSortInput {
  id: SortEnumType
  url: SortEnumType
}

input BlogFilterInput {
  and: [BlogFilterInput!]
  or: [BlogFilterInput!]
  id: IntOperationFilterInput
  url: StringOperationFilterInput
  posts: ListFilterInputTypeOfPostFilterInput
}

"A connection to a list of items."
type BlogsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BlogsEdge!]
  "A flattened list of the nodes."
  nodes: [Blog!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

enum SortEnumType {
  ASC
  DESC
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ListFilterInputTypeOfPostFilterInput {
  all: PostFilterInput
  none: PostFilterInput
  some: PostFilterInput
  any: Boolean
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Blog {
  id: Int!
  url: String!
  posts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PostFilterInput order: [PostSortInput!]): PostsConnection
}

"An edge in a connection."
type BlogsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Blog!
}

input PostFilterInput {
  and: [PostFilterInput!]
  or: [PostFilterInput!]
  id: IntOperationFilterInput
  title: StringOperationFilterInput
  content: StringOperationFilterInput
  blogId: IntOperationFilterInput
  blog: BlogFilterInput
}

input PostSortInput {
  id: SortEnumType
  title: SortEnumType
  content: SortEnumType
  blogId: SortEnumType
  blog: BlogSortInput
}

"A connection to a list of items."
type PostsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PostsEdge!]
  "A flattened list of the nodes."
  nodes: [Post!]
}

type Post {
  id: Int!
  title: String!
  content: String!
  blogId: Int!
  blog: Blog!
}

"An edge in a connection."
type PostsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Post!
}